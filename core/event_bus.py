# core/event_bus.py

# ============================================
# üß™ Sprint 7.1 ‚Äî EventBus / Dispatcher + —Ç–µ—Å—Ç
# ============================================
from dataclasses import dataclass
from typing import Callable, Dict, List, Any, Optional
import time
import uuid

# ---------- 1) –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–±—ã—Ç–∏—è ----------

@dataclass
class Event:
    type: str                    # —Ç–∏–ø: 'student_question', 'expert_answer', ...
    payload: Dict[str, Any]      # –ø–æ–ª–µ–∑–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ (–¥–∞–Ω–Ω—ã–µ)
    source: str = "system"       # –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–æ (student, expert, motivator, fsm, system)
    ts: float = None             # timestamp

    def __post_init__(self):
        if self.ts is None:
            self.ts = time.time()
    def __repr__(self):
        return f"Event(type={self.type!r}, source={self.source!r}, ts={int(self.ts)}, payload_keys={list(self.payload.keys())})"

# ---------- 2) –®–∏–Ω–∞ —Å–æ–±—ã—Ç–∏–π ----------

class EventBus:
    def __init__(self, context: Context):
        self.context = context
        self._subs: Dict[str, List[Callable[[Event], None]]] = {}
        # –ø—Ä–æ—Å—Ç–æ–π –ª–æ–≥ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.progress.setdefault("EventBus", {})
        context.progress["EventBus"].setdefault("log", [])
        context.progress["EventBus"].setdefault("id", str(uuid.uuid4()))

    def subscribe(self, event_type: str, handler: Callable[[Event], None]):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–∞ —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è."""
        self._subs.setdefault(event_type, []).append(handler)

    def publish(self, event: Event):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º + –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ."""
        # –ª–æ–≥
        self._log(event)
        # –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∏–∑–∞—Ü–∏—è
        for handler in self._subs.get(event.type, []):
            try:
                handler(event)
            except Exception as e:
                self._log(Event(
                    type="error",
                    source="eventbus",
                    payload={"reason": str(e), "during": event.type}
                ))

    def _log(self, event: Event):
        rec = {
            "ts": event.ts,
            "type": event.type,
            "source": event.source,
            "payload_keys": list(event.payload.keys())
        }
        log = self.context.progress["EventBus"]["log"]
        log.append(rec)
        self.context.progress["EventBus"]["log"] = log[-200:]  # –æ–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –ª–æ–≥

# ---------- 3) –ê–¥–∞–ø—Ç–µ—Ä—ã –ø–æ–¥ –Ω–∞—à–∏ –º–æ–¥—É–ª–∏ ----------

def make_student_question_handler(expert: 'Expert', bus: EventBus):
    """student_question ‚Üí Expert.respond ‚Üí publish(expert_answer)"""
    def _handler(ev: Event):
        q_text = ev.payload.get("text", "").strip()
        if not q_text:
            return
        # –æ—Ç–≤–µ—Ç —ç–∫—Å–ø–µ—Ä—Ç–∞
        answer = expert.respond(q_text, bus.context)
        # –ø—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—Ç–≤–µ—Ç–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞
        bus.publish(Event(
            type="expert_answer",
            source="expert",
            payload={"question": q_text, "answer": answer}
        ))
    return _handler

def make_expert_answer_handler_motivation(motivator: Optional['Motivator'], bus: EventBus):
    """expert_answer ‚Üí Motivator.observe (–µ—Å–ª–∏ –µ—Å—Ç—å) ‚Üí publish(motivation_update)"""
    def _handler(ev: Event):
        if motivator is None:
            return
        ans = ev.payload.get("answer", {})
        q   = ev.payload.get("question", "")
        # –ø—É—Å—Ç—å Motivator –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∫–∞–∫ "student_question"
        mot = motivator.observe(event="student_question", context=bus.context,
                                question=q, answer=ans)
        # –ø—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–∏/—Å—Ç–∏–ª—è
        bus.publish(Event(
            type="motivation_update",
            source="motivator",
            payload={"last": mot}
        ))
    return _handler

def make_expert_answer_handler_organizer(organizer: Optional['Organizer'], bus: EventBus):
    """(–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) expert_answer ‚Üí Organizer.process ‚Üí publish(organizer_update)"""
    def _handler(ev: Event):
        if organizer is None:
            return
        # –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –º–æ–∂–µ–º —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –∑–∞–¥–∞–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã
        org_data = organizer.process(bus.context)
        bus.publish(Event(
            type="organizer_update",
            source="organizer",
            payload={"organizer": org_data}
        ))
    return _handler

# ---------- 4) –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –∞–¥–∞–ø—Ç–µ—Ä FSM ‚Üí Bus (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) ----------
def attach_fsm_bus_adapter(fsm: 'TeachingFSM', bus: EventBus):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –≤ FSM –º–µ—Ç–æ–¥ route_via_bus(event, data=None),
    —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–±—ã—Ç–∏—è –≤ —à–∏–Ω—É.
    """
    def _route(event_type: str, data: Any = None, source: str = "fsm"):
        payload: Dict[str, Any] = {}
        if isinstance(data, str):
            payload["text"] = data
        elif isinstance(data, dict):
            payload.update(data)
        bus.publish(Event(type=event_type, source=source, payload=payload))
    fsm.route_via_bus = _route  # monkey-patch
    return fsm

# ---------- 5) –°–±–æ—Ä–∫–∞ bus + –ø–æ–¥–ø–∏—Å–∫–∏ ----------
def build_event_bus(context: Context,
                    expert: Optional['Expert']=None,
                    motivator: Optional['Motivator']=None,
                    organizer: Optional['Organizer']=None) -> EventBus:
    bus = EventBus(context)
    # –º–∞—Ä—à—Ä—É—Ç—ã:
    if expert:
        bus.subscribe("student_question", make_student_question_handler(expert, bus))
    if motivator:
        bus.subscribe("expert_answer", make_expert_answer_handler_motivation(motivator, bus))
    if organizer:
        bus.subscribe("expert_answer", make_expert_answer_handler_organizer(organizer, bus))
    # –º–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤—Å—ë –±–∞–∑–æ–≤–æ
    def _logger(ev: Event):
        print(f"ü™µ [LOG] {ev.type} <- {ev.source} :: keys={list(ev.payload.keys())}")
    # –ø–æ–¥–ø–∏—à–µ–º –ª–æ–≥–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    for et in ["student_question", "expert_answer", "motivation_update", "organizer_update", "error"]:
        bus.subscribe(et, _logger)
    return bus

# ---------- 6) –ú–∏–Ω–∏‚Äë–ø—Ä–æ–≤–µ—Ä–∫–∞ (—Å–∞–º–æ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π) ----------
# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É –≤–∞—Å —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã kb / expert / motivator / organizer / ctx / fsm —Ä–∞–Ω–µ–µ.
# –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏-—Ä—ã—á–∞–≥–∏ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Å—Ç–µ–Ω–¥–∞:
"""
kb = KnowledgeBase(); kb.load("–¶–∏—Ñ—Ä–æ–≤–∞—è –∫—É–ª—å—Ç—É—Ä–∞")
expert = Expert(kb)
motivator = Motivator()
organizer = Organizer()
ctx = Context(discipline="–¶–∏—Ñ—Ä–æ–≤–∞—è –∫—É–ª—å—Ç—É—Ä–∞", lesson_number=2, topic="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∏", student_level=1)
fsm = TeachingFSM(ctx, expert=expert)  # –µ—Å–ª–∏ FSM —É–∂–µ –µ—Å—Ç—å
"""

# 6.1 ‚Äî –°–æ–±–∏—Ä–∞–µ–º —à–∏–Ω—É
bus = build_event_bus(context=ctx, expert=expert, motivator=motivator, organizer=Organizer() if 'Organizer' in globals() else None)

# –¥–æ–±–∞–≤—å TTS:
tts = attach_tts_to_bus(bus, engine="piper")   # –∏–ª–∏ "rhvoice"

# (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ø–æ–¥–∫–ª—é—á–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä –∫ FSM, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ—Å—ã–ª–∞—Ç—å –≤ —à–∏–Ω—É
if 'fsm' in globals():
    attach_fsm_bus_adapter(fsm, bus)