# core/fsm.py

class TeachingFSM:
    def __init__(self, context: Context, expert: 'Expert' = None):
        self.context = context
        self.state = "start"
        self.expert = expert

    def handle_event(self, event: str, data: str = None):
        print(f"\nüìç –°–æ–±—ã—Ç–∏–µ: {event}, —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {self.state}")

        # --- –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫: –µ—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç –∑–∞–¥–∞—ë—Ç –≤–æ–ø—Ä–æ—Å –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
        if self.state == "start" and event == "student_question":
            # —Å–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–Ω—è—Ç–∏–µ
            self.handle_event("init")
            # –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º –≤–æ–ø—Ä–æ—Å —É–∂–µ –≤ –Ω–æ–≤–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            return self.handle_event("student_question", data)

        if self.state == "start" and event == "init":
            self.state = "goals"
            result = Cartographer().process(self.context)
            self.context.update_progress("Cartographer", result)
            return

        elif self.state in ["goals", "task", "expertise"] and event == "student_question":
            self.state = "expertise"
            if self.expert:
                answer = self.expert.respond(data, self.context)
                # –ø–µ—á–∞—Ç—å ‚Äî —Å —É—á—ë—Ç–æ–º —Å–±—Ä–æ—Å–∞
                if isinstance(answer, dict) and answer.get("status") == "dialog_cleared":
                    print("üóë –ü–∞–º—è—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–∞ –æ—á–∏—â–µ–Ω–∞.\n")
                else:
                    print(f"\nüí¨ Expert –æ—Ç–≤–µ—Ç–∏–ª:\n{answer['answer']}\n")
            else:
                print("‚ö†Ô∏è Expert –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return

        elif self.state == "expertise" and event in ["timeout", "inactivity"]:
            self.state = "motivation"
            result = Motivator().process(self.context)
            self.context.update_progress("Motivator", result)
            return
        
        #####
        elif event == "student_reflection":
            answer_text = kwargs.get("text", "")
            return self.motivator.record_reflection_answer(context, answer_text)
        #####        

        elif event == "end":
            self.state = "finish"
            print("üéì –ó–∞–Ω—è—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
            return

        else:
            print("‚ö†Ô∏è –°–æ–±—ã—Ç–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")

# –ü–∞—Ç—á–∏–º FSM —Ç–∞–∫, —á—Ç–æ–±—ã –ø–æ—Å–ª–µ Expert.answer –ø—Ä–æ–≥–æ–Ω—è—Ç—å —á–µ—Ä–µ–∑ —Ç—é–Ω–µ—Ä
# (–µ—Å–ª–∏ FSM —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω ‚Äî –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏–º —Ç–æ–ª—å–∫–æ handle_event; –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–µ—Ä–Ω–∏ —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é)
old_TeachingFSM = TeachingFSM

class TeachingFSM(old_TeachingFSM):
    def handle_event(self, event: str, data: str = None):
        print(f"\nüìç –°–æ–±—ã—Ç–∏–µ: {event}, —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {self.state}")

        # –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫
        if self.state == "start" and event == "student_question":
            self.handle_event("init")
            return self.handle_event("student_question", data)

        if self.state == "start" and event == "init":
            self.state = "goals"
            result = Cartographer().process(self.context)
            self.context.update_progress("Cartographer", result)
            return

        elif self.state in ["goals", "task", "expertise"] and event == "student_question":
            self.state = "expertise"
            if self.expert:
                answer = self.expert.respond(data, self.context)

                # –ø–µ—á–∞—Ç—å: —É—á—Ç—ë–º —Å–±—Ä–æ—Å –¥–∏–∞–ª–æ–≥–∞
                if isinstance(answer, dict) and answer.get("status") == "dialog_cleared":
                    print("üóë –ü–∞–º—è—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–∞ –æ—á–∏—â–µ–Ω–∞.\n")
                    return

                # —ç–º–ø–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—Å—Ç–∞–≤–∫–∞
                enriched = tuner.embellish(answer, self.context, user_text=data)
                # —Å–æ—Ö—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
                self.context.progress.setdefault("RelationalTuner", {})
                self.context.progress["RelationalTuner"]["last"] = enriched["empathy"]

                print(f"\nüí¨ Expert –æ—Ç–≤–µ—Ç–∏–ª (empathy):\n{enriched['answer_empathic']}\n")
            else:
                print("‚ö†Ô∏è Expert –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return

        elif self.state == "expertise" and event in ["timeout", "inactivity"]:
            self.state = "motivation"
            result = Motivator().process(self.context)
            self.context.update_progress("Motivator", result)
            return
        
        #####
        elif event == "student_reflection":
            # –æ–∂–∏–¥–∞–µ–º, —á—Ç–æ data ‚Äî —ç—Ç–æ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞
            text = data if isinstance(data, str) else ""
            if hasattr(self, "motivator") and self.motivator:
                out = self.motivator.record_reflection_answer(ctx, text)
                print(f"üìù –†–µ—Ñ–ª–µ–∫—Å–∏—è –∑–∞–ø–∏—Å–∞–Ω–∞: {text}")
                return out
            else:
                return {"status": "error", "reason": "motivator_not_attached"}
        #####
        

        elif event == "end":
            self.state = "finish"
            # –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ ‚Äî –º—è–≥–∫–∞—è ¬´end¬ª-—Ä–µ–ø–ª–∏–∫–∞
            end_stub = {"question": "–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ", "answer": "–î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–Ω—è—Ç–∏–∏!"}
            enriched = tuner.embellish(end_stub, self.context, user_text="–∫–æ–Ω–µ—Ü —Å–µ—Å—Å–∏–∏", tone_override="warm", position="outro")
            print("üéì –ó–∞–Ω—è—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.\n" + enriched["answer_empathic"])
            return

        else:
            print("‚ö†Ô∏è –°–æ–±—ã—Ç–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
            return