# core/conductor.py

# ============================================
# üß™ Sprint 7.2 ‚Äî –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–Ω—è—Ç–∏—è (Conductor + EventBus)
# –¢—Ä–µ–±—É–µ—Ç—Å—è: ctx, bus, expert —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã (–∏, –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, organizer, motivator)
# ============================================
from typing import Optional, Dict, Any
import time

# ‚îÄ‚îÄ 0) –§–æ–ª–±—ç–∫ –¥–ª—è —Ü–µ–ª–µ–π (–µ—Å–ª–∏ Cartographer/goals —É–∂–µ –µ—Å—Ç—å ‚Äî –≤–æ–∑—å–º—ë–º –∏—Ö)
def _get_or_make_goals(context) -> Dict[str, Any]:
    cart = context.progress.get("Cartographer", {})
    if "goals" in cart:
        return cart["goals"]
    # fallback ‚Äî —Å–∞–º—ã–µ –±–∞–∑–æ–≤—ã–µ —Ü–µ–ª–∏
    topic = context.topic or "–¢–µ–º–∞ –∑–∞–Ω—è—Ç–∏—è"
    goals = {
        "main_goal": f"–ò–∑—É—á–∏—Ç—å —Ç–µ–º—É: {topic}",
        "subgoals": [
            f"–ü–æ–Ω—è—Ç—å –∫–ª—é—á–µ–≤—ã–µ –ø–æ–Ω—è—Ç–∏—è —Ç–µ–º—ã ¬´{topic}¬ª",
            "–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–Ω–æ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ",
            "–û—Ü–µ–Ω–∏—Ç—å –ø–æ–ª—É—á–∏–≤—à–∏–π—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ —á–µ–∫‚Äë–ª–∏—Å—Ç—É"
        ],
        "level": "–ø–æ–Ω–∏–º–∞–Ω–∏–µ ‚Üí –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ ‚Üí –æ—Ü–µ–Ω–∫–∞"
    }
    context.update_progress("Cartographer", {**cart, "goals": goals})
    return goals

# ‚îÄ‚îÄ 1) Conductor ‚Äî –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —ç—Ç–∞–ø–æ–≤ –∑–∞–Ω—è—Ç–∏—è
class Conductor:
    """
    –≠—Ç–∞–ø—ã: start ‚Üí goals ‚Üí tasks ‚Üí work ‚Üí reflection ‚Üí wrapup ‚Üí finished
    –£—Å–ª–æ–≤–∏—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤:
      - start: –ø–æ–ª—É—á–∞–µ–º init ‚Üí —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ü–µ–ª–∏ ‚Üí goals_ready
      - goals: –µ—Å—Ç—å —Ü–µ–ª–∏ ‚Üí —Å–æ–∑–¥–∞—ë–º –∑–∞–¥–∞–Ω–∏—è ‚Üí tasks_ready
      - tasks: –µ—Å—Ç—å –∑–∞–¥–∞–Ω–∏—è ‚Üí –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ work
      - work: –ø–æ–ª—É—á–µ–Ω–æ >= N –æ—Ç–≤–µ—Ç–æ–≤ —ç–∫—Å–ø–µ—Ä—Ç–∞ –ò–õ–ò –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ —Ä–µ—Ñ–ª–µ–∫—Å–∏—è ‚Üí reflection
      - reflection: –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ ‚Üí wrapup
      - wrapup: –ø—É–±–ª–∏–∫—É–µ–º lesson_finished, —Å—á–∏—Ç–∞–µ–º –∏—Ç–æ–≥–∏ ‚Üí finished
    –ù–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º Organizer / Motivator, –µ—Å–ª–∏ –µ—Å—Ç—å.
    """

    def __init__(self, context, bus, expert=None, organizer=None, motivator=None, min_work_turns:int=2):
        self.ctx = context
        self.bus = bus
        self.expert = expert
        self.organizer = organizer
        self.motivator = motivator
        self.min_work_turns = min_work_turns

        slot = self.ctx.progress.setdefault("Conductor", {})
        slot.setdefault("stage", "start")
        slot.setdefault("work_turns", 0)
        slot.setdefault("summary", {})
        slot.setdefault("timestamps", {})
        self._mark_time("created")

        # –ø–æ–¥–ø–∏—Å–∫–∏
        bus.subscribe("init", self.on_init)
        bus.subscribe("goals_ready", self.on_goals_ready)
        bus.subscribe("tasks_ready", self.on_tasks_ready)
        bus.subscribe("expert_answer", self.on_expert_answer)
        bus.subscribe("reflection_answer", self.on_reflection_answer)
        bus.subscribe("ask_reflection", self.on_ask_reflection)  # –ª–æ–≥–∏—Ä—É–µ–º —Ñ–∞–∫—Ç
        # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Ç–∞–∫–∂–µ —Å–ª—É—à–∞–µ–º student_reflection
        bus.subscribe("student_reflection", self._proxy_reflection)

    # ‚îÄ‚îÄ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ
    def _stage(self) -> str:
        return self.ctx.progress["Conductor"]["stage"]

    def _set_stage(self, new_stage: str):
        self.ctx.progress["Conductor"]["stage"] = new_stage
        self._mark_time(f"stage:{new_stage}")
        # —à–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—å–Ω–æ —Å–æ–æ–±—â–∞–µ–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        self.bus.publish(Event(type="stage_changed", source="conductor", payload={"stage": new_stage}))

    def _mark_time(self, key: str):
        ts = time.time()
        self.ctx.progress["Conductor"]["timestamps"][key] = ts

    def _has_tasks(self) -> bool:
        org = self.ctx.progress.get("Organizer", {})
        tasks = org.get("tasks") or org.get("Organizer", {}).get("tasks")
        return bool(tasks)

    # ‚îÄ‚îÄ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    def on_init(self, ev: Event):
        if self._stage() != "start":
            return
        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ü–µ–ª–∏ (–∏–ª–∏ —á–∏—Ç–∞–µ–º –≥–æ—Ç–æ–≤—ã–µ)
        goals = _get_or_make_goals(self.ctx)
        self.bus.publish(Event(type="goals_ready", source="conductor", payload={"goals": goals}))

    def on_goals_ready(self, ev: Event):
        if self._stage() not in {"start", "goals"}:
            return
        self._set_stage("goals")
        # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏—è (—á–µ—Ä–µ–∑ Organizer, –µ—Å–ª–∏ –µ—Å—Ç—å)
        if self.organizer is not None:
            org_data = self.organizer.process(self.ctx)
            self.bus.publish(Event(type="organizer_update", source="organizer", payload={"organizer": org_data}))
        # —Å–∏–≥–Ω–∞–ª ¬´–∑–∞–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤—ã¬ª
        self.bus.publish(Event(type="tasks_ready", source="conductor", payload={"has_tasks": self._has_tasks()}))

    def on_tasks_ready(self, ev: Event):
        if self._stage() not in {"goals", "tasks"}:
            return
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        if not self._has_tasks():
            # –º—è–≥–∫–æ –¥–µ–≥—Ä–∞–¥–∏—Ä—É–µ–º: –≤—Å—ë —Ä–∞–≤–Ω–æ –≤ work, –Ω–æ –ø–æ–º–µ—á–∞–µ–º –ø—É—Å—Ç–æ–π –Ω–∞–±–æ—Ä
            self.bus.publish(Event(type="warning", source="conductor",
                                   payload={"msg": "Organizer –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –∑–∞–¥–∞–Ω–∏—è; –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ work."}))
        self._set_stage("tasks")
        # –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–∞–±–æ—Ç—É
        self._set_stage("work")

    def on_expert_answer(self, ev: Event):
        # —Å—á–∏—Ç–∞–µ–º ¬´—Ä–∞–±–æ—á–∏–µ¬ª –ø–æ–≤–æ—Ä–æ—Ç—ã, –Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞ —ç—Ç–∞–ø–µ work
        if self._stage() != "work":
            return
        self.ctx.progress["Conductor"]["work_turns"] += 1
        turns = self.ctx.progress["Conductor"]["work_turns"]

        # —É—Å–ª–æ–≤–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
        if turns >= self.min_work_turns:
            # –ø–æ–ø—Ä–æ—Å–∏–º Motivator –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ (–∏–ª–∏ —Å–∞–º–∏ –ø—Ä–µ–¥–ª–æ–∂–∏–º)
            self.bus.publish(Event(type="ask_reflection", source="conductor",
                                   payload={"reason": "enough_work_turns", "turns": turns}))
            self._set_stage("reflection")

    def on_ask_reflection(self, ev: Event):
        # –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º: –≤–æ–ø—Ä–æ—Å —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω (–µ–≥–æ –ø–æ–∫–∞–∂–µ—Ç UI/Expert)
        asked = self.ctx.progress.setdefault("Reflection", {}).setdefault("asked", [])
        asked.append({"ts": time.time(), "reason": ev.payload.get("reason"), "turns": ev.payload.get("turns")})

    def _proxy_reflection(self, ev: Event):
        """–ï—Å–ª–∏ –≥–¥–µ-—Ç–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ student_reflection ‚Üí –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤ reflection_answer"""
        text = ev.payload.get("answer") or ev.payload.get("text")
        self.bus.publish(Event(type="reflection_answer", source="conductor", payload={"text": text}))

    def on_reflection_answer(self, ev: Event):
        if self._stage() != "reflection":
            # –º–æ–∂–Ω–æ –ø–æ–∑–≤–æ–ª–∏—Ç—å —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –∏ –≤–Ω–µ —ç—Ç–∞–ø–∞, –Ω–æ –¥–ª—è –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–≥–æ —Ü–∏–∫–ª–∞ ‚Äî –≤—ã—Ö–æ–¥–∏–º
            return
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏—Ç–æ–≥–∞–º
        reflect = self.ctx.progress.setdefault("Reflection", {})
        reflect.setdefault("answers", []).append({"ts": time.time(), "text": ev.payload.get("text", "")})
        self._set_stage("wrapup")
        self._finish()

    # ‚îÄ‚îÄ –ø–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
    def _finish(self):
        # —Å–æ–±–∏—Ä–∞–µ–º –ª—ë–≥–∫–∏–π –∏—Ç–æ–≥
        expert_hist = self.ctx.progress.get("Expert", {}).get("dialog_history", [])
        organizer = self.ctx.progress.get("Organizer", {})
        motivator = self.ctx.progress.get("Motivator", {}).get("last", {})

        summary = {
            "topic": self.ctx.topic,
            "answers_count": len(expert_hist),
            "work_turns": self.ctx.progress["Conductor"]["work_turns"],
            "tasks_available": bool(organizer.get("tasks")),
            "motivation_level": self.ctx.progress.get("Motivator", {}).get("level", None),
            "style": motivator.get("style"),
        }
        self.ctx.progress["Conductor"]["summary"] = summary

        # –ø—É–±–ª–∏–∫—É–µ–º –∏—Ç–æ–≥–∏ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –∑–∞–Ω—è—Ç–∏–µ
        self.bus.publish(Event(type="lesson_finished", source="conductor", payload={"summary": summary}))
        self._set_stage("finished")

# ‚îÄ‚îÄ 2) –ü–æ–¥–∫–ª—é—á–∞–µ–º Conductor –∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É bus
conductor = Conductor(
    context=ctx,
    bus=bus,
    expert=expert,
    organizer=Organizer() if 'Organizer' in globals() else None,
    motivator=motivator if 'motivator' in globals() else None,
    min_work_turns=2  # –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –¥–æ 3‚Äì4 –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –ø–∞—Ä—ã
)

#####
# –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ (–ø–æ—Å–ª–µ build_event_bus –∏ —Å–æ–∑–¥–∞–Ω–∏—è Conductor)
#bus.subscribe("restart", make_restart_handler(conductor, bus))
#####

# –î–æ–ø. –ª–æ–≥ ‚Äî —É–¥–æ–±–Ω–æ –≤–∏–¥–µ—Ç—å —Å–º–µ–Ω—É —ç—Ç–∞–ø–æ–≤ –∏ –∏—Ç–æ–≥
def _stage_logger(ev: Event):
    if ev.type in {"stage_changed", "lesson_finished"}:
        print(f"üéö  {ev.type} ‚Üí", ev.payload)

bus.subscribe("stage_changed", _stage_logger)
bus.subscribe("lesson_finished", _stage_logger)

print("‚úÖ Conductor –ø–æ–¥–∫–ª—é—á—ë–Ω. –¢–µ–∫—É—â–∞—è —Å—Ç–∞–¥–∏—è:", ctx.progress["Conductor"]["stage"])