# modules/expert.py

# --- –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –¥–∏–∞–ª–æ–≥–∞ (–ø–æ –∂–µ–ª–∞–Ω–∏—é –º–æ–∂–Ω–æ –¥–µ—Ä–≥–∞—Ç—å –∏–∑ FSM)
def reset_dialog(context: Context):
    context.progress.setdefault("Expert", {})
    context.progress["Expert"]["dialog_history"] = []
    context.progress["Expert"]["last_answer"] = None
    return {"status": "dialog_cleared", "message": "üóë –ü–∞–º—è—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–∞ –æ—á–∏—â–µ–Ω–∞."}

# --- –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π Expert —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π 5.4
import re, time, random

class Expert(TeachingFunction):
    def __init__(self, kb: 'KnowledgeBase'):
        self.kb = kb

    # --- –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —É—Ç–∏–ª–∏—Ç—ã ---
    def _ensure_history(self, context: Context):
        context.progress.setdefault("Expert", {})
        context.progress["Expert"].setdefault("dialog_history", [])
        context.progress["Expert"].setdefault("last_answer", None)
        context.progress["Expert"].setdefault("engagement", 0.5)  # –≤–æ–≤–ª–µ—á—ë–Ω–Ω–æ—Å—Ç—å
        context.progress["Expert"].setdefault("confidence", 0.5)  # —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        context.progress["Expert"].setdefault("tone", "–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π")
        context.progress["Expert"].setdefault("last_interaction_time", time.time())

    def _is_followup(self, question: str) -> bool:
        q = question.strip().lower()
        if len(q.split()) <= 4: return True
        if re.match(r"^(–∞|–∏)\b", q): return True
        if re.search(r"\b(–ø–æ–¥—Ä–æ–±–Ω–µ–µ|–ø–æ—è—Å–Ω–∏|—É—Ç–æ—á–Ω–∏|—Ä–∞–∑–≤–µ—Ä–Ω–∏)\b", q): return True
        return False

    # --- –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞ ---
    def _update_metrics(self, question: str, context: Context):
        q = question.lower()
        engagement = context.progress["Expert"]["engagement"]
        confidence = context.progress["Expert"]["confidence"]

        # –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (–µ—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –±—ã—Å—Ç—Ä–æ ‚Üí –≤–æ–≤–ª–µ—á—ë–Ω–Ω–æ—Å—Ç—å ‚Üë)
        now = time.time()
        last_time = context.progress["Expert"].get("last_interaction_time", now)
        delta = now - last_time
        context.progress["Expert"]["last_interaction_time"] = now
        if delta < 15: engagement += 0.05
        else: engagement -= 0.05

        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ ‚Äî –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        if any(word in q for word in ["–Ω–µ –ø–æ–Ω–∏–º–∞—é", "—Å–ª–æ–∂–Ω–æ", "—É—Å—Ç–∞–ª", "–ø–ª–æ—Ö–æ"]):
            confidence -= 0.1
        if any(word in q for word in ["–ø–æ–ª—É—á–∏–ª–æ—Å—å", "—Å–ø–∞—Å–∏–±–æ", "–ø–æ–Ω—è—Ç–Ω–æ", "–ª–µ–≥–∫–æ"]):
            confidence += 0.1

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0‚Äì1
        context.progress["Expert"]["engagement"] = min(max(engagement, 0), 1)
        context.progress["Expert"]["confidence"] = min(max(confidence, 0), 1)

    # --- –ü–æ–¥—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∞—á–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ ---
    def _adapt_style(self, context: Context):
        conf = context.progress["Expert"]["confidence"]
        if conf < 0.3:
            return "—É–ø—Ä–æ—â—ë–Ω–Ω—ã–π", "–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫"
        elif conf > 0.7:
            return "—É—Å–∫–æ—Ä–µ–Ω–Ω—ã–π", "–ø–∞—Ä—Ç–Ω—ë—Ä –ø–æ –ø—Ä–æ–µ–∫—Ç—É"
        else:
            return "–æ–±—ã—á–Ω—ã–π", "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"

    # --- –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç ---
    def respond(self, question: str, context: Context) -> dict:
        print(f"[Expert] –í–æ–ø—Ä–æ—Å: {question}")
        self._ensure_history(context)

        # --- —Å–±—Ä–æ—Å –ø–∞–º—è—Ç–∏
        if question.strip().lower() in {"—Å–±—Ä–æ—Å", "reset", "–æ—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å"}:
            return reset_dialog(context)

        # –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        self._update_metrics(question, context)

        # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏—è –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é
        intents = detect_intents(question)
        detail = detect_detail_level(question)

        # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ü–µ–ø–æ—á–µ–∫ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π
        history = context.progress["Expert"]["dialog_history"]
        augmented_query, in_reply_to = question, None
        if history and self._is_followup(question):
            last = history[-1]
            in_reply_to = last.get("question")
            prev_snippet = (last.get("answer") or "")[:200]
            augmented_query = f"{in_reply_to}. {question}. –ö–æ–Ω—Ç–µ–∫—Å—Ç: {prev_snippet}"

        # –ø–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
        results = self.kb.search(augmented_query, top_k=2)
        if not results:
            base = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É."
            sources = []
        else:
            combined_text = "\n".join([doc for doc, _, _ in results])
            base = f"–ù–∞ –æ—Å–Ω–æ–≤–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∫—É—Ä—Å–∞:\n{combined_text[:800]}..."
            sources = [name for _, name, _ in results]

        # –∞–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥–∞—á–∏
        pace, tone = self._adapt_style(context)

        # —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
        answer = make_brief(base, 300) if detail == "short" else base
        explanation = make_explanation(base, intents, detail)
        next_steps = build_next_steps(intents, context)

        answer_data = {
            "question": question,
            "in_reply_to": in_reply_to,
            "intents": intents,
            "detail": detail,
            "answer": answer,
            "explanation": explanation,
            "sources": sources,
            "next_steps": next_steps,
            "pace": pace,
            "tone": tone,
            "engagement": context.progress["Expert"]["engagement"],
            "confidence": context.progress["Expert"]["confidence"]
        }

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        history.append(answer_data)
        context.progress["Expert"]["last_answer"] = answer_data
        return answer_data