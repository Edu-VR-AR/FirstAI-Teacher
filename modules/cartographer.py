# modules/cartographer.py

class TeachingFunction:
    def process(self, context: Context) -> dict:
        raise NotImplementedError("–ú–µ—Ç–æ–¥ process –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω")

# üìå –í–ù–ï –ö–õ–ê–°–°–ê ‚Äî –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ü–µ–ª–µ–π –ø–æ —É—Ä–æ–≤–Ω—è–º Bloom/SoLO
def generate_goals(topic: str, docs: list) -> dict:
    return {
        "main_goal": f"–ò–∑—É—á–∏—Ç—å —Ç–µ–º—É: {topic}",
        "subgoals": [
            f"–û–±—ä—è—Å–Ω–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ –ø–æ–Ω—è—Ç–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–µ–º–æ–π ¬´{topic}¬ª",
            f"–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∑–Ω–∞–Ω–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –ø–æ —Ç–µ–º–µ",
            f"–û—Ü–µ–Ω–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã/—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π"
        ],
        "level": "–ø–æ–Ω–∏–º–∞–Ω–∏–µ ‚Üí –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ ‚Üí –æ—Ü–µ–Ω–∫–∞"
    }

def generate_text_map(goals: dict, knowledge_types: dict) -> str:
    lines = []
    lines.append(f"üéØ –ì–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å –∑–∞–Ω—è—Ç–∏—è: {goals['main_goal']}")
    lines.append("\nüìö –ü–æ–¥—Ü–µ–ª–∏:")
    for i, g in enumerate(goals["subgoals"], 1):
        lines.append(f"  {i}. {g}")

    lines.append(f"\nüìà –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {goals['level']}")
    
    lines.append("\nüîç –¢–∏–ø—ã –∑–Ω–∞–Ω–∏–π:")
    if knowledge_types.get("facts"):
        lines.append("  üìò –§–∞–∫—Ç—ã:")
        for fact in knowledge_types["facts"]:
            lines.append(f"    - {fact}")
    if knowledge_types.get("procedures"):
        lines.append("  üõ† –ü—Ä–æ—Ü–µ–¥—É—Ä—ã:")
        for proc in knowledge_types["procedures"]:
            lines.append(f"    - {proc}")
    if knowledge_types.get("meta"):
        lines.append("  üß† –ú–µ—Ç–∞-–∑–Ω–∞–Ω–∏—è:")
        for meta in knowledge_types["meta"]:
            lines.append(f"    - {meta}")
    
    return "\n".join(lines)

# üì¶ –ö–ª–∞—Å—Å Cartographer, –≤—ã–∑—ã–≤–∞—é—â–∏–π —Ñ—É–Ω–∫—Ü–∏—é generate_goals
class Cartographer(TeachingFunction):
    def process(self, context: Context) -> dict:
        print(f"[Cartographer] –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ü–µ–ª–µ–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ —Ç–µ–º–µ: {context.topic}")

        # –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        docs = load_documents(context.discipline)
        if not docs:
            return {"error": "–±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞"}

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–µ–ª–µ–π
        goals = generate_goals(context.topic, docs)

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –∑–Ω–∞–Ω–∏–π
        knowledge_types = extract_knowledge_types(docs)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–∞—Ä—Ç—ã
        text_map = generate_text_map(goals, knowledge_types)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.update_progress("Cartographer", {
            "doc_count": len(docs),
            "goals": goals,
            "knowledge_types": knowledge_types,
            "text_map": text_map
        })

        return context.progress["Cartographer"]